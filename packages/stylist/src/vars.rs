use std::collections::HashMap;

use crate::StyleSource;

fn to_css_vars_for(this: &dyn CssVariables, selector: &str) -> StyleSource {
    use crate::ast::*;

    let mut vars = HashMap::new();
    this.__append(&mut vars);

    let mut contents = Vec::with_capacity(vars.len());
    for (name, value) in vars.into_iter() {
        let attr = StyleAttribute {
            key: name.into(),
            value: vec![value.into()].into(),
        };

        let content = RuleBlockContent::StyleAttr(attr);

        contents.push(content);
    }

    let block = Block {
        condition: vec![vec![selector.to_owned().into()].into()].into(),
        content: contents.into(),
    };

    let scope_contents = vec![ScopeContent::Block(block)];

    Sheet::from(scope_contents).into()
}

/// The trait for Css Variables.
///
/// This trait is generated by the `#[derive(CssVariables)]` derive macro.
pub trait CssVariables {
    /// The entropy assigned to all variables in this style sheet.
    fn entropy(&self) -> &'static str;

    /// Appends a css variables for the current struct.
    #[doc(hidden)]
    fn __append(&self, w: &mut HashMap<String, String>);

    /// Creates a style source with a certain selector.
    fn to_css_vars_for(&self, selector: &str) -> StyleSource
    where
        Self: Sized,
    {
        to_css_vars_for(self, selector)
    }

    /// Creates a style source to be attached to the host element of a style.
    fn to_css_vars(&self) -> StyleSource
    where
        Self: Sized,
    {
        self.to_css_vars_for(":root")
    }
}
